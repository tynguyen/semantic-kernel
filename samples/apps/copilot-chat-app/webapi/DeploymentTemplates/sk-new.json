{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "3338430546815090156"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "semkernel",
      "metadata": {
        "description": "Name for the deployment - Must consist of alphanumeric characters or '-'"
      }
    },
    "appServiceSku": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "B1",
        "S1",
        "S2",
        "S3",
        "P1V3",
        "P2V3",
        "I1V2",
        "I2V2"
      ],
      "metadata": {
        "description": "SKU for the Azure App Service plan"
      }
    },
    "packageUri": {
      "type": "string",
      "defaultValue": "https://skaasdeploy.blob.core.windows.net/api/semantickernelapi.zip",
      "metadata": {
        "description": "Location of package to deploy as the web service"
      }
    },
    "completionModel": {
      "type": "string",
      "defaultValue": "gpt-35-turbo",
      "metadata": {
        "description": "Model to use for chat completions"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "metadata": {
        "description": "Model to use for text embeddings"
      }
    },
    "plannerModel": {
      "type": "string",
      "defaultValue": "gpt-35-turbo",
      "metadata": {
        "description": "Completion model the task planner should use"
      }
    },
    "semanticKernelApiKey": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Semantic Kernel server API key - Generated GUID by default (Provide empty string to disable API key auth)"
      }
    },
    "deployCosmosDB": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy Cosmos DB for chat storage"
      }
    },
    "deployQdrant": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy Qdrant (in a container) for memory storage"
      }
    },
    "deploySpeechServices": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy Azure Speech Services to be able to input chat text by voice"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "SemanticKernel",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('name')]"
          },
          "appServiceSku": {
            "value": "[parameters('appServiceSku')]"
          },
          "packageUri": {
            "value": "[parameters('packageUri')]"
          },
          "aiService": {
            "value": "AzureOpenAI"
          },
          "completionModel": {
            "value": "[parameters('completionModel')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "plannerModel": {
            "value": "[parameters('plannerModel')]"
          },
          "semanticKernelApiKey": {
            "value": "[parameters('semanticKernelApiKey')]"
          },
          "deployCosmosDB": {
            "value": "[parameters('deployCosmosDB')]"
          },
          "deployQdrant": {
            "value": "[parameters('deployQdrant')]"
          },
          "deploySpeechServices": {
            "value": "[parameters('deploySpeechServices')]"
          },
          "deployNewAzureOpenAI": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "11121756795286782434"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "semkernel",
              "metadata": {
                "description": "Name for the deployment - Must consist of alphanumeric characters or '-'"
              }
            },
            "appServiceSku": {
              "type": "string",
              "defaultValue": "B1",
              "allowedValues": [
                "B1",
                "S1",
                "S2",
                "S3",
                "P1V3",
                "P2V3",
                "I1V2",
                "I2V2"
              ],
              "metadata": {
                "description": "SKU for the Azure App Service plan"
              }
            },
            "packageUri": {
              "type": "string",
              "defaultValue": "https://skaasdeploy.blob.core.windows.net/api/semantickernelapi.zip",
              "metadata": {
                "description": "Location of package to deploy as the web service"
              }
            },
            "aiService": {
              "type": "string",
              "defaultValue": "AzureOpenAI",
              "allowedValues": [
                "AzureOpenAI",
                "OpenAI"
              ],
              "metadata": {
                "description": "Underlying AI service"
              }
            },
            "completionModel": {
              "type": "string",
              "defaultValue": "gpt-35-turbo",
              "metadata": {
                "description": "Model to use for chat completions"
              }
            },
            "embeddingModel": {
              "type": "string",
              "defaultValue": "text-embedding-ada-002",
              "metadata": {
                "description": "Model to use for text embeddings"
              }
            },
            "plannerModel": {
              "type": "string",
              "defaultValue": "gpt-35-turbo",
              "metadata": {
                "description": "Completion model the task planner should use"
              }
            },
            "endpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Azure OpenAI endpoint to use (ignored when AI service is not AzureOpenAI)"
              }
            },
            "apiKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Azure OpenAI or OpenAI API key"
              }
            },
            "semanticKernelApiKey": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Semantic Kernel server API key - Generated GUID by default (Provide empty string to disable API key auth)"
              }
            },
            "deployNewAzureOpenAI": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to deploy a new Azure OpenAI instance"
              }
            },
            "deployCosmosDB": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to deploy Cosmos DB for chat storage"
              }
            },
            "deployQdrant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to deploy Qdrant (in a container) for memory storage"
              }
            },
            "deploySpeechServices": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to deploy Azure Speech Services to be able to input chat text by voice"
              }
            }
          },
          "variables": {
            "location": "[resourceGroup().location]",
            "rgIdHash": "[uniqueString(resourceGroup().id)]",
            "uniqueName": "[format('{0}-{1}', parameters('name'), variables('rgIdHash'))]",
            "storageFileShareName": "aciqdrantshare"
          },
          "resources": [
            {
              "condition": "[parameters('deployQdrant')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', format('st{0}', variables('rgIdHash')), 'default', variables('storageFileShareName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('st{0}', variables('rgIdHash')), 'default')]"
              ]
            },
            {
              "condition": "[parameters('deployQdrant')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', format('st{0}', variables('rgIdHash')), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', variables('rgIdHash')))]"
              ]
            },
            {
              "condition": "[parameters('deployNewAzureOpenAI')]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2022-12-01",
              "name": "[format('ai-{0}', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "kind": "OpenAI",
              "sku": {
                "name": "S0"
              },
              "properties": {
                "customSubDomainName": "[toLower(variables('uniqueName'))]"
              }
            },
            {
              "condition": "[parameters('deployNewAzureOpenAI')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', format('ai-{0}', variables('uniqueName')), parameters('completionModel'))]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('completionModel')]"
                },
                "scaleSettings": {
                  "scaleType": "Standard"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName')))]"
              ]
            },
            {
              "condition": "[parameters('deployNewAzureOpenAI')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', format('ai-{0}', variables('uniqueName')), parameters('embeddingModel'))]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('embeddingModel')]"
                },
                "scaleSettings": {
                  "scaleType": "Standard"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName')))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', format('ai-{0}', variables('uniqueName')), parameters('completionModel'))]"
              ]
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[format('asp-{0}-skweb', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "sku": {
                "name": "[parameters('appServiceSku')]"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-09-01",
              "name": "[format('app-{0}-skweb', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "tags": {
                "skweb": "1"
              },
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-skweb', variables('uniqueName')))]",
                "httpsOnly": true,
                "virtualNetworkSubnetId": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel'), '2021-05-01').subnets[0].id]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-skweb', variables('uniqueName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel')]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', format('app-{0}-skweb', variables('uniqueName')), 'web')]",
              "properties": {
                "alwaysOn": true,
                "cors": {
                  "allowedOrigins": [
                    "http://localhost:3000",
                    "https://localhost:3000"
                  ],
                  "supportCredentials": true
                },
                "detailedErrorLoggingEnabled": true,
                "minTlsVersion": "1.2",
                "netFrameworkVersion": "v6.0",
                "use32BitWorkerProcess": false,
                "vnetRouteAllEnabled": true,
                "webSocketsEnabled": true,
                "appSettings": [
                  {
                    "name": "AIService:Type",
                    "value": "[parameters('aiService')]"
                  },
                  {
                    "name": "AIService:Endpoint",
                    "value": "[if(parameters('deployNewAzureOpenAI'), reference(resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName'))), '2022-12-01').endpoint, parameters('endpoint'))]"
                  },
                  {
                    "name": "AIService:Key",
                    "value": "[if(parameters('deployNewAzureOpenAI'), listKeys(resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName'))), '2022-12-01').key1, parameters('apiKey'))]"
                  },
                  {
                    "name": "AIService:Models:Completion",
                    "value": "[parameters('completionModel')]"
                  },
                  {
                    "name": "AIService:Models:Embedding",
                    "value": "[parameters('embeddingModel')]"
                  },
                  {
                    "name": "AIService:Models:Planner",
                    "value": "[parameters('plannerModel')]"
                  },
                  {
                    "name": "Authorization:Type",
                    "value": "[if(empty(parameters('semanticKernelApiKey')), 'None', 'ApiKey')]"
                  },
                  {
                    "name": "Authorization:ApiKey",
                    "value": "[parameters('semanticKernelApiKey')]"
                  },
                  {
                    "name": "ChatStore:Type",
                    "value": "[if(parameters('deployCosmosDB'), 'cosmos', 'volatile')]"
                  },
                  {
                    "name": "ChatStore:Cosmos:Database",
                    "value": "CopilotChat"
                  },
                  {
                    "name": "ChatStore:Cosmos:ChatSessionsContainer",
                    "value": "chatsessions"
                  },
                  {
                    "name": "ChatStore:Cosmos:ChatMessagesContainer",
                    "value": "chatmessages"
                  },
                  {
                    "name": "ChatStore:Cosmos:ConnectionString",
                    "value": "[if(parameters('deployCosmosDB'), listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('cosmos-{0}', variables('uniqueName')))), '2023-04-15').connectionStrings[0].connectionString, '')]"
                  },
                  {
                    "name": "MemoriesStore:Type",
                    "value": "[if(parameters('deployQdrant'), 'Qdrant', 'Volatile')]"
                  },
                  {
                    "name": "MemoriesStore:Qdrant:Host",
                    "value": "[if(parameters('deployQdrant'), format('https://{0}', reference(resourceId('Microsoft.Web/sites', format('app-{0}-qdrant', variables('uniqueName'))), '2022-09-01').defaultHostName), '')]"
                  },
                  {
                    "name": "MemoriesStore:Qdrant:Port",
                    "value": "443"
                  },
                  {
                    "name": "AzureSpeech:Region",
                    "value": "[variables('location')]"
                  },
                  {
                    "name": "AzureSpeech:Key",
                    "value": "[if(parameters('deploySpeechServices'), listKeys(resourceId('Microsoft.CognitiveServices/accounts', format('cog-{0}', variables('uniqueName'))), '2022-12-01').key1, '')]"
                  },
                  {
                    "name": "AllowedOrigins",
                    "value": "[[*]"
                  },
                  {
                    "name": "Kestrel:Endpoints:Https:Url",
                    "value": "https://localhost:443"
                  },
                  {
                    "name": "Logging:LogLevel:Default",
                    "value": "Warning"
                  },
                  {
                    "name": "Logging:LogLevel:SemanticKernel.Service",
                    "value": "Warning"
                  },
                  {
                    "name": "Logging:LogLevel:Microsoft.SemanticKernel",
                    "value": "Warning"
                  },
                  {
                    "name": "Logging:LogLevel:Microsoft.AspNetCore.Hosting",
                    "value": "Warning"
                  },
                  {
                    "name": "Logging:LogLevel:Microsoft.Hosting.Lifetimel",
                    "value": "Warning"
                  },
                  {
                    "name": "ApplicationInsights:ConnectionString",
                    "value": "[reference(resourceId('Microsoft.Insights/components', format('appi-{0}', variables('uniqueName'))), '2020-02-02').ConnectionString]"
                  },
                  {
                    "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                    "value": "[reference(resourceId('Microsoft.Insights/components', format('appi-{0}', variables('uniqueName'))), '2020-02-02').ConnectionString]"
                  },
                  {
                    "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                    "value": "~2"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', format('appi-{0}', variables('uniqueName')))]",
                "[resourceId('Microsoft.Web/sites', format('app-{0}-qdrant', variables('uniqueName')))]",
                "[resourceId('Microsoft.Web/sites', format('app-{0}-skweb', variables('uniqueName')))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('cosmos-{0}', variables('uniqueName'))))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', format('ai-{0}', variables('uniqueName')))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', format('cog-{0}', variables('uniqueName')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/extensions",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', format('app-{0}-skweb', variables('uniqueName')), 'MSDeploy')]",
              "kind": "string",
              "properties": {
                "packageUri": "[parameters('packageUri')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('app-{0}-skweb', variables('uniqueName')))]",
                "[resourceId('Microsoft.Web/sites/config', format('app-{0}-skweb', variables('uniqueName')), 'web')]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[format('appi-{0}', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "kind": "string",
              "tags": {
                "displayName": "AppInsight"
              },
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', variables('uniqueName')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('la-{0}', variables('uniqueName')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/siteextensions",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', format('app-{0}-skweb', variables('uniqueName')), 'Microsoft.ApplicationInsights.AzureWebSites')]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('app-{0}-skweb', variables('uniqueName')))]",
                "[resourceId('Microsoft.Web/sites/extensions', format('app-{0}-skweb', variables('uniqueName')), 'MSDeploy')]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[format('la-{0}', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "tags": {
                "displayName": "Log Analytics"
              },
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 90,
                "features": {
                  "searchVersion": 1,
                  "legacy": 0,
                  "enableLogAccessUsingOnlyResourcePermissions": true
                }
              }
            },
            {
              "condition": "[parameters('deployQdrant')]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[format('st{0}', variables('rgIdHash'))]",
              "location": "[variables('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": false
              }
            },
            {
              "condition": "[parameters('deployQdrant')]",
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[format('asp-{0}-qdrant', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "kind": "linux",
              "sku": {
                "name": "P1v3"
              },
              "properties": {
                "reserved": true
              }
            },
            {
              "condition": "[parameters('deployQdrant')]",
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-09-01",
              "name": "[format('app-{0}-qdrant', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "kind": "app,linux,container",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-qdrant', variables('uniqueName')))]",
                "httpsOnly": true,
                "reserved": true,
                "clientCertMode": "Required",
                "virtualNetworkSubnetId": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel'), '2021-05-01').subnets[1].id]",
                "siteConfig": {
                  "numberOfWorkers": 1,
                  "linuxFxVersion": "DOCKER|qdrant/qdrant:latest",
                  "alwaysOn": true,
                  "vnetRouteAllEnabled": true,
                  "ipSecurityRestrictions": [
                    {
                      "vnetSubnetResourceId": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel'), '2021-05-01').subnets[0].id]",
                      "action": "Allow",
                      "priority": 300,
                      "name": "Allow front vnet"
                    },
                    {
                      "ipAddress": "Any",
                      "action": "Deny",
                      "priority": 2147483647,
                      "name": "Deny all"
                    }
                  ],
                  "azureStorageAccounts": {
                    "aciqdrantshare": {
                      "type": "AzureFiles",
                      "accountName": "[if(parameters('deployQdrant'), format('st{0}', variables('rgIdHash')), 'notdeployed')]",
                      "shareName": "[variables('storageFileShareName')]",
                      "mountPath": "/qdrant/storage",
                      "accessKey": "[if(parameters('deployQdrant'), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('st{0}', variables('rgIdHash'))), '2022-09-01').keys[0].value, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-qdrant', variables('uniqueName')))]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', variables('rgIdHash')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel')]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-05-01",
              "name": "vnet-semantickernel",
              "location": "[variables('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "webSubnet",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-web', variables('uniqueName')))]"
                      },
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Web",
                          "locations": [
                            "*"
                          ]
                        }
                      ],
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  },
                  {
                    "name": "qdrantSubnet",
                    "properties": {
                      "addressPrefix": "10.0.2.0/24",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-qdrant', variables('uniqueName')))]"
                      },
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Web",
                          "locations": [
                            "*"
                          ]
                        }
                      ],
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-qdrant', variables('uniqueName')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}-web', variables('uniqueName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "[format('nsg-{0}-web', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowAnyHTTPSInbound",
                    "properties": {
                      "protocol": "TCP",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "[format('nsg-{0}-qdrant', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Web/sites/virtualNetworkConnections",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', format('app-{0}-skweb', variables('uniqueName')), 'webSubnetConnection')]",
              "properties": {
                "vnetResourceId": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel'), '2021-05-01').subnets[0].id]",
                "isSwift": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('app-{0}-skweb', variables('uniqueName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel')]"
              ]
            },
            {
              "condition": "[parameters('deployQdrant')]",
              "type": "Microsoft.Web/sites/virtualNetworkConnections",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', format('app-{0}-qdrant', variables('uniqueName')), 'qdrantSubnetConnection')]",
              "properties": {
                "vnetResourceId": "[reference(resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel'), '2021-05-01').subnets[1].id]",
                "isSwift": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('app-{0}-qdrant', variables('uniqueName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks', 'vnet-semantickernel')]"
              ]
            },
            {
              "condition": "[parameters('deployCosmosDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[toLower(format('cosmos-{0}', variables('uniqueName')))]",
              "location": "[variables('location')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[variables('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard"
              }
            },
            {
              "condition": "[parameters('deployCosmosDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]",
              "properties": {
                "resource": {
                  "id": "CopilotChat"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('cosmos-{0}', variables('uniqueName'))))]"
              ]
            },
            {
              "condition": "[parameters('deployCosmosDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat', 'chatmessages')]",
              "properties": {
                "resource": {
                  "id": "chatmessages",
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash",
                    "version": 2
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]"
              ]
            },
            {
              "condition": "[parameters('deployCosmosDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat', 'chatsessions')]",
              "properties": {
                "resource": {
                  "id": "chatsessions",
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash",
                    "version": 2
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]"
              ]
            },
            {
              "condition": "[parameters('deployCosmosDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat', 'chatparticipants')]",
              "properties": {
                "resource": {
                  "id": "chatparticipants",
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash",
                    "version": 2
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('cosmos-{0}', variables('uniqueName'))), 'CopilotChat')]"
              ]
            },
            {
              "condition": "[parameters('deploySpeechServices')]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2022-12-01",
              "name": "[format('cog-{0}', variables('uniqueName'))]",
              "location": "[variables('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "SpeechServices",
              "identity": {
                "type": "None"
              },
              "properties": {
                "customSubDomainName": "[format('cog-{0}', variables('uniqueName'))]",
                "networkAcls": {
                  "defaultAction": "Allow"
                },
                "publicNetworkAccess": "Enabled"
              }
            }
          ],
          "outputs": {
            "deployedUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', format('app-{0}-skweb', variables('uniqueName'))), '2022-09-01').defaultHostName]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "endpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'SemanticKernel'), '2022-09-01').outputs.deployedUrl.value]"
    }
  }
}